package day6

import (
	"adventofcode/m/v2/util"
	"fmt"
)

func Day6(inputFile string, part int) {
	if part == 0 {
		fmt.Printf("Unique at: %d\n", sol(inputFile, 4))
	} else {
		fmt.Printf("Unique at: %d\n", sol(inputFile, 14))
	}
}

func sol(inputFile string, bufferSize int) int {
	rs := util.RuneScanner(inputFile)

	n := 0
	r, ok := util.Read(rs)

	init := make([]rune, bufferSize)
	lookup := map[rune]bool{}
	for i := 0; i < bufferSize && ok; i++ {
		init[i] = asRune(r)
		lookup[asRune(r)] = true
		r, ok = util.Read(rs)
		n++
	}

	buffer := &Buffer{init, lookup, false, 0, bufferSize}
	for ok {
		buffer.shift(asRune(r))

		if buffer.unique() {
			return n + 1
		}
		r, ok = util.Read(rs)
		n++
	}

	return 0
}

func asRune(str string) rune {
	return []rune(str)[0]
}

type Buffer struct {
	runes 	[]rune
	lookup 	map[rune]bool
	uniq	 	bool
	iter  	int
	size  	int
}

func (b *Buffer) shift(r rune) {
	delete(b.lookup, b.runes[b.iter])
	if b.lookup[r] {
		b.uniq = true
	}
	b.runes[b.iter] = r
	b.iter++
	b.iter = b.iter % b.size
	b.lookup[r] = true	
}

func (b *Buffer) unique() bool {
	return b.uniq
}
